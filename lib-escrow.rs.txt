use anchor_lang::prelude::*;
use anchor_spl::token;
use anchor_spl::token::{TokenAccount, Transfer, CloseAccount, Mint};
// Entrypoint
declare_id!("4wHt7GM2iTFL5F9ENN3i1bWfhmh6iqyarrjbbZfvqcb1");

const VAULT_AUTHORITY_SEED: &[u8] = b"vault-authority";

#[program]
pub mod escrow_anchor {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, release_amount:u64, receive_amount:u64) -> Result<()> {
        initialize_handler(ctx, release_amount,receive_amount)
    }

    pub fn exchange(ctx: Context<Exchange>) -> Result<()> {
        exchange_handler(ctx)
    }

    pub fn cancel(ctx: Context<Cancel>) -> Result<()> {
        cancel_handler(ctx)
    }
}

// States
pub const ESCROW_ACCOUNT_SEED: &[u8] = b"escrow-account";

pub const ESCROW_ACCOUNT_LEN: usize = 8     // ANCHOR DISCRIMINATOR
    + 32                                    // INITIALIZER WALLET KEY
    + 32                                    // INITIALIZER RELEASE TOKEN ACCOUNT KEY
    + 32                                    // INITIALIZER RECEIVE TOKEN ACCOUNT KEY
    + 8
    + 8;

#[account]
pub struct EscrowAccount {
    pub initializer_key: Pubkey,
    pub initializer_release_token_account: Pubkey,
    pub initializer_receive_token_account: Pubkey,
    pub initializer_release_token_amount: u64,
    pub initializer_receive_token_amount: u64
}

// Instructions
pub fn cancel_handler(ctx: Context<Cancel>) -> Result<()> {
    let (_vault_authority, vault_authority_bump) =
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], ctx.program_id);
    let authority_seeds = &[&VAULT_AUTHORITY_SEED[..], &[vault_authority_bump]];

    token::transfer(
        ctx.accounts
            .into_transfer_to_initializer_context()
            .with_signer(&[&authority_seeds[..]]),
        ctx.accounts.escrow_account.initializer_release_token_amount,
    )?;

    token::close_account(
        ctx.accounts
            .into_close_context()
            .with_signer(&[&authority_seeds[..]]),
    )?;

    Ok(())
}

pub fn exchange_handler(ctx: Context<Exchange>) -> Result<()> {
    let (_vault_authority, vault_authority_bump) =
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], ctx.program_id);
    let authority_seeds = &[&VAULT_AUTHORITY_SEED[..], &[vault_authority_bump]];

    token::transfer(
        ctx.accounts.into_transfer_to_initializer_context(),
        ctx.accounts.escrow_account.initializer_receive_token_amount,
    )?;

    token::transfer(
        ctx.accounts
            .into_transfer_to_taker_context()
            .with_signer(&[&authority_seeds[..]]),
            ctx.accounts.escrow_account.initializer_release_token_amount,
    )?;

    token::close_account(
        ctx.accounts
            .into_close_context()
            .with_signer(&[&authority_seeds[..]]),
    )?;

    Ok(())
}

pub fn initialize_handler(ctx: Context<Initialize>, release_amount:u64, receive_amount:u64 ) -> Result<()> {
    ctx.accounts.escrow_account.initializer_key = *ctx.accounts.initializer.key;
    ctx.accounts
        .escrow_account
        .initializer_release_token_account = *ctx
        .accounts
        .initializer_release_token_account
        .to_account_info()
        .key;
    ctx.accounts
        .escrow_account
        .initializer_receive_token_account = *ctx
        .accounts
        .initializer_receive_token_account
        .to_account_info()
        .key;

    ctx.accounts.escrow_account.initializer_release_token_amount = release_amount;
    ctx.accounts.escrow_account.initializer_receive_token_amount = receive_amount;

    if release_amount <= ctx.accounts.initializer_release_token_account.amount {
        return Err(EscrowError::InsufficientTokenBalance.into());
    }

    token::transfer(
        ctx.accounts.into_transfer_to_pda_context(),
        release_amount
    )?;

    Ok(())
}

// Contexts
#[derive(Accounts)]
pub struct Cancel<'info> {
    #[account(mut)]
    pub initializer: Signer<'info>,
    #[account(mut)]
    pub vault_account: Account<'info, TokenAccount>,
    /// CHECK: will fail if vault_authority is not authority of our vault_account
    pub vault_authority: AccountInfo<'info>,
    #[account(mut)]
    pub initializer_release_token_account: Account<'info, TokenAccount>,
    #[account(
        mut,
        constraint = escrow_account.initializer_key == *initializer.key @ EscrowError::InvalidInitializer,
        constraint = escrow_account.initializer_release_token_account == 
            *initializer_release_token_account.to_account_info().key @  EscrowError::InvalidInitializerReleaseTokenAccount,
        close = initializer
    )]
    pub escrow_account: Account<'info, EscrowAccount>,
    /// CHECK: This is not dangerous because we don't read or write from this account
    pub token_program: AccountInfo<'info>,
}

impl<'info> Cancel<'info> {
    pub fn into_transfer_to_initializer_context(
        &self,
    ) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        let cpi_accounts = Transfer {
            from: self.vault_account.to_account_info().clone(),
            to: self
                .initializer_release_token_account
                .to_account_info()
                .clone(),
            authority: self.vault_authority.clone(),
        };
        CpiContext::new(self.token_program.clone(), cpi_accounts)
    }

    pub fn into_close_context(&self) -> CpiContext<'_, '_, '_, 'info, CloseAccount<'info>> {
        let cpi_accounts = CloseAccount {
            account: self.vault_account.to_account_info().clone(),
            destination: self.initializer.to_account_info().clone(),
            authority: self.vault_authority.clone(),
        };
        CpiContext::new(self.token_program.clone(), cpi_accounts)
    }
}

#[derive(Accounts)]
pub struct Exchange<'info> {
    #[account(mut)]
    pub taker: Signer<'info>,
    #[account(mut)]
    pub taker_release_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub taker_receive_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub initializer_receive_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    /// CHECK: contraint checker against escrow_account.initializer
    pub initializer: AccountInfo<'info>,
    #[account(
        mut,
        constraint = escrow_account.initializer_receive_token_amount <= taker_release_token_account.amount @ EscrowError::InsufficientTokenBalance,
        constraint = escrow_account.initializer_receive_token_account == 
            *initializer_receive_token_account.to_account_info().key @ EscrowError::InvalidInitializerReceiveTokenAccount,
        constraint = escrow_account.initializer_key == *initializer.key @ EscrowError::InvalidInitializer,
        close = initializer
    )]
    pub escrow_account: Account<'info, EscrowAccount>,
    #[account(mut)]
    pub vault_account: Account<'info, TokenAccount>,
    /// CHECK: will fail if vault_authority is not authority of our vault_account
    pub vault_authority: AccountInfo<'info>,
    /// CHECK: This is not dangerous because we don't read or write from this account
    pub token_program: AccountInfo<'info>,
}

impl<'info> Exchange<'info> {
    pub fn into_transfer_to_initializer_context(
        &self,
    ) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        let cpi_accounts = Transfer {
            from: self.taker_release_token_account.to_account_info().clone(),
            to: self
                .initializer_receive_token_account
                .to_account_info()
                .clone(),
            authority: self.taker.to_account_info().clone(),
        };
        CpiContext::new(self.token_program.clone(), cpi_accounts)
    }

    pub fn into_transfer_to_taker_context(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        let cpi_accounts = Transfer {
            from: self.vault_account.to_account_info().clone(),
            to: self.taker_receive_token_account.to_account_info().clone(),
            authority: self.vault_authority.clone(),
        };
        CpiContext::new(self.token_program.clone(), cpi_accounts)
    }

    pub fn into_close_context(&self) -> CpiContext<'_, '_, '_, 'info, CloseAccount<'info>> {
        let cpi_accounts = CloseAccount {
            account: self.vault_account.to_account_info().clone(),
            destination: self.initializer.clone(),
            authority: self.vault_authority.clone(),
        };
        CpiContext::new(self.token_program.clone(), cpi_accounts)
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(mut)]
    pub initializer: Signer<'info>,
    pub mint: Account<'info, Mint>,
    #[account(
        init,
        seeds = [initializer.key.as_ref(), mint.key().as_ref()],
        bump,
        payer = initializer,
        token::mint = mint,
        token::authority = vault_authority,
    )]
    pub vault_account: Account<'info, TokenAccount>,
    #[account(
        seeds = [initializer.key.as_ref(), initializer.key.as_ref()],
        bump,
    )]
    /// CHECK: This is not dangerous because we have checked account using seeds
    pub vault_authority: UncheckedAccount<'info>,
    #[account(mut)]
    pub initializer_release_token_account: Account<'info, TokenAccount>,
    pub initializer_receive_token_account: Account<'info, TokenAccount>,
    #[account(
        init,
        seeds = [ESCROW_ACCOUNT_SEED],
        bump,
        payer = initializer,
        space = ESCROW_ACCOUNT_LEN
    )]
    pub escrow_account: Account<'info, EscrowAccount>,
    /// CHECK: This is not dangerous because we don't read or write from this account
    pub system_program: AccountInfo<'info>,
    pub rent: Sysvar<'info, Rent>,
    /// CHECK: This is not dangerous because we don't read or write from this account
    pub token_program: AccountInfo<'info>,
}


impl <'info> Initialize <'info> {
    pub fn into_transfer_to_pda_context(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        let cpi_accounts = Transfer {
            from: self
                .initializer_release_token_account
                .to_account_info()
                .clone(),
            to: self.vault_account.to_account_info().clone(),
            authority: self.initializer.to_account_info().clone(),
        };
        CpiContext::new(self.token_program.clone(), cpi_accounts)
    }
}

// Error
#[error_code]
pub enum EscrowError {
    #[msg("Token account does not contain sufficient token amount")]
    InsufficientTokenBalance,
    #[msg(
        "There is a mismatch between given and escrow account's initializer receive token account"
    )]
    InvalidInitializerReceiveTokenAccount,
    #[msg("There is a mismatch between given and escrow account's initializer")]
    InvalidInitializer,
    #[msg(
        "There is a mismatch between given and escrow account's initializer release token account"
    )]
    InvalidInitializerReleaseTokenAccount,
}