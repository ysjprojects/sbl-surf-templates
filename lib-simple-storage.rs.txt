use anchor_lang::{prelude::*, solana_program::program_pack::IsInitialized};

// Entrypoint

declare_id!("FjRUbADjAQP3G7wBUdUzGCxVCGwcFhJnsonjpn3MDMMZ");

#[program]
pub mod simple_storage {
  use super::*;

  pub fn add_or_update_entry(
    ctx: Context<AddOrUpdateEntry>,
    variant: u8,
    </>2,ATTRIBUTES_WITH_TYPE
  ) -> Result<()> {
    process_instruction(ctx, variant, <ATTRIBUTES_AS_ARGS>)
  }
}

// State 

#[account]
pub struct <DBNAME>AccountState {
  pub is_initialized: bool,
  </>1,ATTRIBUTES_WITH_TYPE_IN_STRUCT
}

impl IsInitialized for <DBNAME>AccountState {
  fn is_initialized(&self) -> bool {
    self.is_initialized
  }
}

// Instruction

pub enum <DBNAME>Instruction {
  AddEntry {
    </>2,ATTRIBUTES_WITH_TYPE
  },
  UpdateEntry {
    </>2,ATTRIBUTES_WITH_TYPE
  }
}

impl <DBNAME>Instruction {
  pub fn unpack(
    variant: u8, 
    </>2,ATTRIBUTES_WITH_TYPE
  ) -> Result<Self> {
    Ok(match variant {
      0 => Self::AddEntry {
        </>4,ATTRIBUTES_ASSIGNMENT
      },
      1 => Self::UpdateEntry {
        </>4,ATTRIBUTES_ASSIGNMENT
      },
      _ => return Err(ProgramError::InvalidInstructionData.into())
    })
  }
}


// Processor

#[derive(Accounts)]
#[instruction(
  variant: u8, 
  </>1,ATTRIBUTES_WITH_TYPE
)]
pub struct AddOrUpdateEntry<'info> {
  #[account(mut)]
  pub initializer: Signer<'info>,
  #[account(
    init_if_needed, 
    seeds = [initializer.key.as_ref(), <PRIMARY_KEY>.as_bytes().as_ref()],
    bump,
    payer = initializer,
    space = 1000,
    constraint = <SPACE_CONSTRAINTS> <= 1000
      @ <DBNAME>Error::InvalidDataLength
  )]
  pub pda_account: Account<'info, <DBNAME>AccountState>,
  pub system_program: Program<'info, System>
}

pub fn add_entry(
  ctx: Context<AddOrUpdateEntry>,
  </>1,ATTRIBUTES_WITH_TYPE
) -> Result<()> {

  if ctx.accounts.pda_account.is_initialized() {
      return Err(ProgramError::AccountAlreadyInitialized.into());
  }

  </>1,SET_PDA_ATTRIBUTES

  ctx.accounts.pda_account.is_initialized = true;

  msg!("PDA created: {}", ctx.accounts.pda_account.key());

  Ok(())
}

pub fn update_entry(
  ctx: Context<AddOrUpdateEntry>,
  </>1,ATTRIBUTES_WITH_TYPE_WITHOUT_PRIMARY_KEY
) -> Result<()> {    
  if !ctx.accounts.pda_account.is_initialized() {
    return Err(<DBNAME>Error::UninitializedAccount.into());
  }

  </>1,SET_PDA_ATTRIBUTES_WITHOUT_PRIMARY_KEY

  msg!("PDA updated: {}", ctx.accounts.pda_account.key());

  Ok(())
}

pub fn process_instruction(
  ctx: Context<AddOrUpdateEntry>,
  variant: u8,
  </>1,ATTRIBUTES_WITH_TYPE
) -> Result<()> {
  let instruction = <DBNAME>Instruction::unpack(variant, <ATTRIBUTES_AS_ARGS>)?;
  match instruction {
    <DBNAME>Instruction::AddEntry { <ATTRIBUTES_AS_ARGS> } => {
      add_entry(ctx, <ATTRIBUTES_AS_ARGS>)
    },
    <DBNAME>Instruction::UpdateEntry { <ATTRIBUTES_AS_ARGS_WITHOUT_PRIMARY_KEY> } => {
      update_entry(ctx, <ATTRIBUTES_AS_ARGS_WITHOUT_PRIMARY_KEY>)
    }
  }
}

// Error

#[error_code]
pub enum <DBNAME>Error{
  #[msg("Account not initialized yet")]
  UninitializedAccount,
  
  #[msg("PDA derived does not equal PDA passed in")]
  InvalidPDA,
  
  #[msg("Input data exceeds max length")]
  InvalidDataLength,
}
